name: Build iOS Static Library

on:
  push:
    paths:
      - '**.c'
      - '**.h'
      - '.github/workflows/main.yml'
      - 'generate-xcodeproj.sh'
  pull_request:
    paths:
      - '**.c'
      - '**.h'
      - '.github/workflows/main.yml'
      - 'generate-xcodeproj.sh'
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 时间 00:00 运行
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Select Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app
        xcodebuild -version
      
    - name: Prepare build environment
      run: |
        pwd
        ls -la
        echo "Creating build directory..."
        mkdir -p build/lua
        cd build/lua
        echo "Current directory: $(pwd)"
        
        echo "Creating Xcode build directories..."
        mkdir -p "$(pwd)/lua.build/Release-iphoneos/lua.build"
        chmod -R 755 "$(pwd)/lua.build"
        
        echo "Linking source files..."
        for file in ../../*.{h,c}; do
          if [ -f "$file" ] && [[ "$file" != *"/lua.c" && "$file" != *"/onelua.c" && "$file" != *"/ltests.c" ]]; then
            echo "Linking: $file"
            ln -sf "$file" .
          fi
        done
        
        echo "Build directory contents:"
        ls -la
        
    - name: Create Xcode project
      run: |
        cd build/lua
        echo "Current directory: $(pwd)"
        chmod +x ../../generate-xcodeproj.sh
        ../../generate-xcodeproj.sh
        
        echo "Xcode project contents:"
        ls -la lua.xcodeproj/
        
    - name: Build static library
      run: |
        cd build/lua
        echo "Current directory: $(pwd)"
        set -e
        
        echo "Building for iOS devices (arm64)..."
        
        # Clean any previous build artifacts
        rm -rf build
        mkdir -p build/Release-iphoneos
        
        echo "Source files to be compiled:"
        ls -la *.c *.h
        
        xcodebuild clean build \
          -project lua.xcodeproj \
          -target lua \
          -configuration Release \
          -sdk iphoneos \
          ONLY_ACTIVE_ARCH=NO \
          BUILD_FOR_DISTRIBUTION=YES \
          ARCHS="arm64" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          SYMROOT="$(pwd)/build" \
          OBJROOT="$(pwd)/build" \
          CONFIGURATION_BUILD_DIR="$(pwd)/build/Release-iphoneos" \
          CONFIGURATION_TEMP_DIR="$(pwd)/build/Release-iphoneos" \
          BUILT_PRODUCTS_DIR="$(pwd)/build/Release-iphoneos" \
          TARGET_BUILD_DIR="$(pwd)/build/Release-iphoneos" \
          GCC_GENERATE_DEBUGGING_SYMBOLS=NO \
          DEBUG_INFORMATION_FORMAT="" \
          VALID_ARCHS="arm64" \
          EXCLUDED_ARCHS="" \
          TARGETED_DEVICE_FAMILY="1,2" \
          IPHONEOS_DEPLOYMENT_TARGET=12.0 \
          SDKROOT=iphoneos \
          SKIP_INSTALL=NO \
          DEPLOYMENT_LOCATION=NO \
          DSTROOT="$(pwd)/build" \
          INSTALL_PATH="" \
          DYLIB_CURRENT_VERSION=1 \
          DYLIB_COMPATIBILITY_VERSION=1 \
          PRODUCT_BUNDLE_IDENTIFIER="org.lua.lua" \
          PRODUCT_MODULE_NAME="lua" \
          PRODUCT_MODULE_VERSION=1 \
          DEFINES_MODULE=NO \
          -verbose
        
        echo "Build completed successfully!"
        echo "Checking build directory structure:"
        ls -R build
        
        echo "Current directory contents:"
        ls -la
        
        echo "Checking all possible library locations:"
        echo "1. Checking Release-iphoneos directory:"
        ls -la build/Release-iphoneos || true
        echo "2. Checking direct build directory:"
        ls -la build || true
        echo "3. Checking build/Release-iphoneos directory:"
        ls -la build/Release-iphoneos || true
        echo "4. Checking intermediate build directories:"
        find build -type d -ls
        
        echo "Searching for .a files:"
        find "$(pwd)" -type f -name "*.a" -ls
        
        echo "Checking for object files:"
        find "$(pwd)" -type f -name "*.o" -ls
        
        # Try multiple possible locations
        POSSIBLE_LOCATIONS=(
          "build/Release-iphoneos/liblua.a"
          "build/liblua.a"
          "liblua.a"
          "build/Release-iphoneos/lua/liblua.a"
          "build/Release-iphoneos/lua.build/liblua.a"
          "build/lua.build/Release-iphoneos/liblua.a"
          "build/Release-iphoneos/lua.build/Release-iphoneos/lua.build/Objects-normal/arm64/liblua.a"
        )
        
        FOUND_LIB=""
        for loc in "${POSSIBLE_LOCATIONS[@]}"; do
          if [ -f "$loc" ]; then
            echo "Found library at: $loc"
            FOUND_LIB="$loc"
            break
          fi
        done
        
        if [ ! -z "$FOUND_LIB" ]; then
          echo "Library file found at: $FOUND_LIB"
          file "$FOUND_LIB"
          cp "$FOUND_LIB" ./liblua.a
        else
          echo "Library file not found in any expected location"
          echo "Performing deep search for any .a files:"
          find "$(pwd)" -type f -name "*.a" -ls
          
          # Try to find any .a file
          FOUND_LIB=$(find "$(pwd)" -type f -name "*.a" | head -n 1)
          if [ ! -z "$FOUND_LIB" ]; then
            echo "Found library at alternate location: $FOUND_LIB"
            cp "$FOUND_LIB" ./liblua.a
          else
            echo "No .a files found anywhere in the build directory"
            echo "Build directory contents:"
            find "$(pwd)" -type f -ls
            echo "Checking compilation output:"
            cat build/Release-iphoneos/lua.build/Release-iphoneos/lua.build/lua-*.dia || true
            exit 1
          fi
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-static-library
        path: build/lua/liblua.a
        if-no-files-found: error 