name: iOS Static Library Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build iOS Static Library
    runs-on: macos-13
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Select Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app
        xcodebuild -version
      
    - name: Prepare Build Environment
      run: |
        set -e
        mkdir -p build/lua
        cd build/lua
        echo "Current directory: $(pwd)"
        echo "Listing repository root:"
        ls -la ../..
        echo "Creating symbolic links for source files..."
        # First, create links for all .h files
        for file in ../../*.h; do
          if [ -f "$file" ]; then
            echo "Linking header: $file"
            ln -sf "$file" .
          fi
        done
        # Then, create links for .c files, excluding specific ones
        for file in ../../*.c; do
          if [ -f "$file" ] && ! [[ "$file" =~ (lua\.c|onelua\.c|ltests\.c)$ ]]; then
            echo "Linking source: $file"
            ln -sf "$file" .
          fi
        done
        echo "Listing build directory contents:"
        ls -la
        
    - name: Create Xcode Project
      working-directory: build/lua
      run: |
        set -e
        echo "Generating Xcode project..."
        chmod +x ../../.github/workflows/generate-xcodeproj.sh
        ../../.github/workflows/generate-xcodeproj.sh
        echo "Listing project directory contents:"
        ls -la lua.xcodeproj/
        echo "Project file contents:"
        cat lua.xcodeproj/project.pbxproj
        
    - name: Build Static Library
      working-directory: build/lua
      run: |
        set -e
        
        # Common build settings
        COMMON_BUILD_SETTINGS=(
          ONLY_ACTIVE_ARCH=NO
          BUILD_FOR_DISTRIBUTION=YES
          SKIP_INSTALL=NO
          CODE_SIGNING_REQUIRED=NO
          CODE_SIGN_IDENTITY=""
          GCC_OPTIMIZATION_LEVEL=3
          ENABLE_BITCODE=NO
          CLANG_ENABLE_OBJC_ARC=YES
          COPY_PHASE_STRIP=YES
          SUPPORTS_MACCATALYST=NO
          IPHONEOS_DEPLOYMENT_TARGET=12.0
          GCC_PREPROCESSOR_DEFINITIONS="LUA_USE_POSIX=1"
        )
        
        echo "Building for iOS devices (arm64)..."
        mkdir -p "../Release-iphoneos"
        xcodebuild clean build \
          -project lua.xcodeproj \
          -configuration Release \
          -sdk iphoneos \
          BUILD_DIR="../" \
          CONFIGURATION_BUILD_DIR="../Release-iphoneos" \
          ARCHS="arm64" \
          "${COMMON_BUILD_SETTINGS[@]}" || { echo "iOS device build failed"; exit 1; }
        
        echo "Checking iOS device build output:"
        ls -la "../Release-iphoneos/"
        
        echo "Building for iOS Simulator (x86_64, arm64)..."
        mkdir -p "../Release-iphonesimulator"
        xcodebuild clean build \
          -project lua.xcodeproj \
          -configuration Release \
          -sdk iphonesimulator \
          BUILD_DIR="../" \
          CONFIGURATION_BUILD_DIR="../Release-iphonesimulator" \
          ARCHS="x86_64 arm64" \
          "${COMMON_BUILD_SETTINGS[@]}" || { echo "iOS simulator build failed"; exit 1; }
        
        echo "Checking iOS simulator build output:"
        ls -la "../Release-iphonesimulator/"
        
        # Verify build outputs
        if [ ! -f "../Release-iphoneos/liblua.a" ]; then
          echo "Error: iOS device library not found in:"
          ls -la "../Release-iphoneos/"
          exit 1
        fi
        
        if [ ! -f "../Release-iphonesimulator/liblua.a" ]; then
          echo "Error: iOS simulator library not found in:"
          ls -la "../Release-iphonesimulator/"
          exit 1
        fi
        
        echo "Creating universal binary with lipo..."
        lipo -create \
          "../Release-iphoneos/liblua.a" \
          "../Release-iphonesimulator/liblua.a" \
          -output "../liblua.a" || { echo "lipo creation failed"; exit 1; }
        
        echo "Verifying universal binary:"
        if [ ! -f "../liblua.a" ]; then
          echo "Error: Failed to create universal binary"
          exit 1
        fi
        
        echo "Universal binary details:"
        ls -la "../liblua.a"
        file "../liblua.a"
        lipo -info "../liblua.a"
        
        echo "Build completed successfully"
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-static-library
        path: build/liblua.a
        if-no-files-found: error 