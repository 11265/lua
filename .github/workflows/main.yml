name: Build iOS Static Library

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Select Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app
        xcodebuild -version
      
    - name: Prepare build environment
      run: |
        pwd
        ls -la
        echo "Creating build directory..."
        mkdir -p build/lua
        cd build/lua
        echo "Current directory: $(pwd)"
        
        echo "Linking source files..."
        for file in ../../*.{h,c}; do
          if [ -f "$file" ] && [[ "$file" != *"/lua.c" && "$file" != *"/onelua.c" && "$file" != *"/ltests.c" ]]; then
            echo "Linking: $file"
            ln -sf "$file" .
          fi
        done
        
        echo "Build directory contents:"
        ls -la
        
    - name: Create Xcode project
      run: |
        cd build/lua
        echo "Current directory: $(pwd)"
        chmod +x ../../generate-xcodeproj.sh
        ../../generate-xcodeproj.sh
        
        echo "Xcode project contents:"
        ls -la lua.xcodeproj/
        
    - name: Build static library
      run: |
        cd build/lua
        BUILD_DIR="$(pwd)"
        echo "Current directory: $BUILD_DIR"
        set -e
        
        echo "Building for iOS devices (arm64)..."
        xcodebuild clean build \
          -project lua.xcodeproj \
          -target lua \
          -configuration Release \
          -sdk iphoneos \
          ONLY_ACTIVE_ARCH=NO \
          BUILD_FOR_DISTRIBUTION=YES \
          ARCHS="arm64" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          -verbose
        
        echo "Building for iOS Simulator (x86_64, arm64)..."
        xcodebuild clean build \
          -project lua.xcodeproj \
          -target lua \
          -configuration Release \
          -sdk iphonesimulator \
          ONLY_ACTIVE_ARCH=NO \
          BUILD_FOR_DISTRIBUTION=YES \
          ARCHS="x86_64 arm64" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          -verbose
        
        echo "Finding library files..."
        DEVICE_LIB=""
        SIMULATOR_LIB=""
        
        # Single traversal to find both libraries
        find . -name "liblua.a" -type f | while read -r lib; do
          if [ -f "$lib" ]; then
            file_info=$(file "$lib")
            echo "Found library: $lib"
            echo "File info: $file_info"
            
            if echo "$file_info" | grep -q "arm64" && ! echo "$file_info" | grep -q "x86_64"; then
              DEVICE_LIB="$lib"
              echo "✓ This is the device library (arm64)"
            elif echo "$file_info" | grep -q "x86_64"; then
              SIMULATOR_LIB="$lib"
              echo "✓ This is the simulator library (x86_64)"
            fi
          fi
        done
        
        if [ -z "$DEVICE_LIB" ] || [ -z "$SIMULATOR_LIB" ]; then
          echo "Error: Could not find both device and simulator libraries"
          echo "Device library: $DEVICE_LIB"
          echo "Simulator library: $SIMULATOR_LIB"
          exit 1
        fi
        
        echo "Creating universal binary..."
        lipo -create "$DEVICE_LIB" "$SIMULATOR_LIB" -output liblua.a
        
        echo "Build completed successfully!"
        ls -la liblua.a
        file liblua.a
        lipo -info liblua.a
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-static-library
        path: build/lua/liblua.a
        if-no-files-found: error 